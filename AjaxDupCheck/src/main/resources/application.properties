spring.application.name=AjaxDupCheck

# application.properties 에는 name 만 작성하고,
# config.properties 파일을 따로 생성하여, 이 파일 안에 아래 정보를 모두 작성할 것

spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe

spring.datasource.username=KH_TEST
spring.datasource.password=KH1234

server.port=8050

mybatis.mapper-locations=classpath:/templates/mapper/*.xml

# prefix: html 파일 위치
# spring.mustache.prefix=classpath:/templates/

# suffix: 파일 확장자명(맨 끝)
# spring.mustache.suffix=.html

# Thymeleaf 템플릿 엔진을 사용하지 않기 때문에, html 파일 위치를 가리키는 설정 값을 작성해주어야 한다.

# 파일이 저장된 위치 경로를 설정
# /** ◀ 모든 경로를 가져와, 경로 패턴들을 전부 확보하겠다는 의미이다.
# static 하위에 만드는 /img/ (이미지 폴더) 하위에 있는 이미지들이나
# static 하위에 만드는 /css/ (css 폴더) 하위에 있는 css 파일들이나
# static 하위에 만드는 /js/ (js 폴더) 하위에 있는 js 파일들이나
# static 하위에 만드는 /html/ (html 폴더) 하위에 있는 html 파일 등
# 모든 파일의 경로를 확인하겠다는 의미이다.
spring.mvc.static-path-pattern=/**

# static 폴더 하위에 있는 파일들을 java 에서 전부 사용할 수 있다.
spring.web.resources.static-locations=classpath:/static/

# 주소 설정을 간단하게 해결하는 방법
# 1. 템플릿 엔진 Thymeleaf 이용하기
# 2. 템플릿 엔진 Grooby 이용하기
# 3. 템플릿 엔진 Mustache 이용하기: html 문서를 출력하려면 설정을 추가로 해주어야 한다.
#  ▶ prefix: 어느 위치(폴더) 에서 시작하는지 // suffix: 무슨 확장자 명으로 종료하는지

# 템플릿 엔진의 경우, react 를 build 하기 전까지는 사용할 필요가 없지만,
# react 를 build 해서 사용할 경우에는 필요하기 때문에 처음부터 설정해 주는 것이 좋다.

# 템플릿 엔진이 존재하지 않는다면, config 파일을 작성해서 설정해주면 된다.